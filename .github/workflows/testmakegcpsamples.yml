# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Testing the lint standards for GCP standard3tier (ignoring errors)...
        run: |
          echo '(cd samples/GCP/templates/standard3tier/ && make)'
          echo '>>Ignore header errors<<'
          (cd samples/GCP/templates/standard3tier/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for GCP bastionhost (ignoring errors)...
        run: |
          echo '(cd samples/GCP/templates/bastionhost/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/GCP/templates/bastionhost/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for GCP vpn-classic (ignoring errors)...
        run: |
          echo '(cd samples/GCP/templates/vpn-classic/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/GCP/templates/vpn-classic/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for GCP vpn-hybrid (ignoring errors)...
        run: |
          echo '(cd samples/GCP/templates/vpn-hybrid/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/GCP/templates/vpn-hybrid/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for GCP kubernetes (ignoring errors)...
        run: |
          echo '(cd samples/GCP/templates/kubernetes/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/GCP/templates/kubernetes/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for AZ bastionhost (ignoring errors)...
        run: |
          echo '(cd samples/Azure/templates/bastionhost/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/Azure/templates/bastionhost/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for AZ kubernetes (ignoring errors)...
        run: |
          echo '(cd samples/Azure/templates/kubernetes/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/Azure/templates/kubernetes/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for AZ vpn-classic (ignoring errors)...
        run: |
          echo '(cd samples/Azure/templates/vpn-classic/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/Azure/templates/vpn-classic/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for AZ vpn-hybrid (ignoring errors)...
        run: |
          echo '(cd samples/Azure/templates/vpn-hybrid/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/Azure/templates/vpn-hybrid/ && make -i docker_test_lint docker_generate_docs)
      - name: Testing the lint standards for AZ standard3tier (ignoring errors)...
        run: |
          echo '(cd samples/Azure/templates/standard3tier/ && make)'
          echo '>>Ignore module errors and header errors<<'
          (cd samples/Azure/templates/standard3tier/ && make -i docker_test_lint docker_generate_docs)
      - name: Security scan (ignoring errors)...
        run: |
          echo 'Running terrascan to show security issues (ignore error codes)...'
          (cd samples && (docker run --rm -v "$(pwd):/iac" -w /iac accurics/terrascan scan || true))
          (cd samples && (docker run --rm -v "$(pwd):/iac" -w /iac accurics/terrascan scan -o junit-xml > security-scan.xml || true))
      - name: Publish Unit Test Results...
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        if: always()
        with:
          files: samples/security-scan.xml

